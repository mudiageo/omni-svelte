import type { BetterAuthOptions } from 'better-auth';
import { write_if_changed} from '../../utils/filesystem.js';
import { runtime_directory } from '../../utils';

export async function generateBetterAuthConfig(
  userConfig: AuthConfig,
): Promise<BetterAuthOptions> {
  const providers = mapProvidersTosBetterAuth(userConfig.providers);
  
  
  return {
    
    // Map user config to Better Auth config
    socialProviders: providers.social,
    emailAndPassword: providers.credentials ? {
      enabled: true,
      requireEmailVerification: userConfig.features?.emailVerification ?? true,
      minPasswordLength: 8,
    } : undefined,
    
    session: {
      expiresIn: userConfig.session?.maxAge ?? 60 * 60 * 24 * 30,
      updateAge: 60 * 60 * 24, // Update session every 24 hours
      cookieCache: {
        enabled: true,
        maxAge: 5 * 60, // 5 minutes
      },
    },
    
    // Framework defaults
    advanced: {
      crossSubDomainCookies: {
        enabled: false,
      },
      useSecureCookies: process.env.NODE_ENV === 'production',
      generateId: () => crypto.randomUUID(),
    },
    
    // Two-factor if enabled
    twoFactor: userConfig.features?.twoFactor ? {
      enabled: true,
      issuer: userConfig.features.twoFactorIssuer || 'Omni App',
    } : undefined,

    emailVerification: {
      enabled: true,
      sendOnSignUp: true,
    },
    resetPassword: {
      enabled: true,
    },
  
    // User callbacks
    hooks: {
      after: [
        {
          matcher: (ctx) => ctx.path === '/sign-in',
          handler: async (ctx) => {
            await userConfig.callbacks?.onSignIn?.(ctx);
          },
        },
        {
          matcher: (ctx) => ctx.path === '/sign-out',
          handler: async (ctx) => {
            await userConfig.callbacks?.onSignOut?.(ctx);
          },
        },
      ],
    },
    trustedOrigins: [
      process.env.ORIGIN || 'http://localhost:5173',
      userConfig.trustedOrigins?.map(o => `'${o}'`).join(',\n    ') || ''
  ],
    plugins: [], // make sure sveltekitCookies is the last plugin in the array

  };
}

function mapProvidersTosBetterAuth(providers: AuthConfig['providers']) {
  const social: any = {};
  let credentials = false;
  
  for (const provider of providers) {
    if (provider.type === 'credentials') {
      credentials = true;
    } else {
      social[provider.type] = {
        clientId: provider.clientId,
        clientSecret: provider.clientSecret,
        ...(provider.scope && { scope: provider.scope }),
      };
    }
  }
  
  return { social, credentials };
}

export async function generateAuthConfig(auth_config) {
  new AuthConfigGenerator().generate(auth_config);
}

export class AuthConfigGenerator {

  async generate(authConfig) {
    // Generate auth config files
    await Promise.all([
      this.generateAuthConfig(authConfig),
      this.generateClientConfig(authConfig),
    ]);
  }

  private async generateAuthConfig(authConfig) {

    const configCode = `
// Auto-generated by Omni Framework - DO NOT EDIT
${this.generatePluginImports(authConfig)}

export const config = {
  appName: '${authConfig.appName || 'Omni App'}',
  
  ${this.generateBaseConfig(authConfig)}
  
  ${this.generateSocialProvidersConfig(authConfig.socialProviders)}
  
  ${this.generateEmailPasswordConfig(authConfig.emailAndPassword)}
  
  ${this.generateSessionConfig(authConfig.session)}
  
  ${this.generateSecurityConfig(authConfig.security)}
  
  ${this.generateAccountConfig(authConfig.account)}
  
  ${this.generateUserConfig(authConfig.user)}
  
  ${this.generateAdvancedConfig(authConfig.advanced)}
  
  ${this.generatePluginsConfig(authConfig.plugins)}
};

export default config;
`;
    write_if_changed(`${runtime_directory}/auth/__generated__/config.js`,  configCode)

  }

  private generatePluginImports(auth: AuthConfig) {
    const imports = new Set<string>();
    
    // Core plugins
    const corePlugins = [
      'username', 'anonymous', 'phoneNumber', 'magicLink', 
      'emailOTP', 'genericOAuth', 'oneTap', 'apiKey', 
      'admin', 'organization', 'bearer', 'multiSession', 
      'openAPI', 'jwt', 'twoFactor'
    ];
    
    // Check which plugins are enabled
    if (auth.plugins) {
      for (const plugin of Object.keys(auth.plugins)) {
        if (corePlugins.includes(plugin)) {
          imports.add(plugin);
        }
      }
    }
    
    // Add special imports
    const specialImports: string[] = [];
    if (auth.plugins?.passkey) {
      specialImports.push(`import { passkey } from 'better-auth/plugins/passkey';`);
    }
    if (auth.plugins?.sso) {
      specialImports.push(`import { sso } from 'better-auth/plugins/sso';`);
    }
    
    const coreImportsStr = imports.size > 0 
      ? `import {\n  ${Array.from(imports).join(',\n  ')}\n} from 'better-auth/plugins';`
      : '';
    
    return [coreImportsStr, ...specialImports].filter(Boolean).join('\n');
  }

  private generateBaseConfig(auth: AuthConfig) {
    const config: string[] = [];
    
    if (auth.baseURL) {
      config.push(`baseURL: '${auth.baseURL}',`);
    }
    
    if (auth.basePath) {
      config.push(`basePath: '${auth.basePath}',`);
    }
    
    if (auth.secret) {
      config.push(`secret: '${auth.secret}',`);
    } else {
      config.push(`secret: process.env.BETTER_AUTH_SECRET || process.env.AUTH_SECRET,`);
    }
    
    if (auth.trustedOrigins && auth.trustedOrigins.length > 0) {
      config.push(`trustedOrigins: [${auth.trustedOrigins.map(o => `'${o}'`).join(', ')}],`);
    }
    
    if (auth.redirectOnError) {
      config.push(`redirectOnError: '${auth.redirectOnError}',`);
    }
    
    if (auth.redirectOnSuccess) {
      config.push(`redirectOnSuccess: '${auth.redirectOnSuccess}',`);
    }
    
    return config.join('\n  ');
  }

  private generateSocialProvidersConfig(providers?: AuthConfig['socialProviders']) {
    if (!providers || Object.keys(providers).length === 0) return '';
    
    const providerConfigs: string[] = [];
    
    for (const [name, config] of Object.entries(providers)) {
      const providerConfig: string[] = [`${name}: {`];
      
      if (config.enabled !== false) {
        providerConfig.push(`  enabled: true,`);
      }
      
      if (config.clientId) {
        providerConfig.push(`  clientId: '${config.clientId}',`);
      }
      
      if (config.clientSecret) {
        providerConfig.push(`  clientSecret: '${config.clientSecret}',`);
      }
      
      if (config.redirectURI) {
        providerConfig.push(`  redirectURI: '${config.redirectURI}',`);
      }
      
      if (config.scope) {
        providerConfig.push(`  scope: [${config.scope.map(s => `'${s}'`).join(', ')}],`);
      }
      
      providerConfig.push(`},`);
      providerConfigs.push(providerConfig.join('\n    '));
    }
    
    return `socialProviders: {\n    ${providerConfigs.join('\n    ')}\n  },`;
  }

  private generateEmailPasswordConfig(config?: AuthConfig['emailAndPassword']) {
    if (!config?.enabled) return '';
    
    const configLines: string[] = ['emailAndPassword: {'];
    
    configLines.push(`  enabled: true,`);
    
    if (config.requireEmailVerification !== undefined) {
      configLines.push(`  requireEmailVerification: ${config.requireEmailVerification},`);
    }
    
    if (config.autoSignIn !== undefined) {
      configLines.push(`  autoSignIn: ${config.autoSignIn},`);
    }
    
    if (config.minPasswordLength) {
      configLines.push(`  minPasswordLength: ${config.minPasswordLength},`);
    }
    
    if (config.maxPasswordLength) {
      configLines.push(`  maxPasswordLength: ${config.maxPasswordLength},`);
    }
    
    if (config.sendResetPasswordEmail) {
      configLines.push(`  sendResetPasswordEmail: async (user, url, request) => {
    const { sendResetPasswordEmail } = await import('$pkg/emails');
    return sendResetPasswordEmail(user, url, request);
  },`);
    }
    
    if (config.sendVerificationEmail) {
      configLines.push(`  sendVerificationEmail: async (user, url, request) => {
    const { sendVerificationEmail } = await import('$pkg/emails');
    return sendVerificationEmail(user, url, request);
  },`);
    }
    
    configLines.push('},');
    return configLines.join('\n  ');
  }

  private generateSessionConfig(config?: AuthConfig['session']) {
    if (!config) return '';
    
    const configLines: string[] = ['session: {'];
    
    if (config.expiresIn) {
      configLines.push(`  expiresIn: ${config.expiresIn},`);
    }
    
    if (config.updateAge) {
      configLines.push(`  updateAge: ${config.updateAge},`);
    }
    
    if (config.cookieCache) {
      configLines.push(`  cookieCache: {`);
      configLines.push(`    enabled: ${config.cookieCache.enabled ?? true},`);
      if (config.cookieCache.maxAge) {
        configLines.push(`    maxAge: ${config.cookieCache.maxAge},`);
      }
      configLines.push(`  },`);
    }
    
    if (config.freshAge) {
      configLines.push(`  freshAge: ${config.freshAge},`);
    }
    
    configLines.push('},');
    return configLines.join('\n  ');
  }

  private generateSecurityConfig(config?: AuthConfig['security']) {
    if (!config) return '';
    
    const configLines: string[] = ['security: {'];
    
    if (config.rateLimit) {
      configLines.push(`  rateLimit: {`);
      configLines.push(`    enabled: ${config.rateLimit.enabled ?? true},`);
      if (config.rateLimit.window) {
        configLines.push(`    window: ${config.rateLimit.window},`);
      }
      if (config.rateLimit.max) {
        configLines.push(`    max: ${config.rateLimit.max},`);
      }
      configLines.push(`  },`);
    }
    
    if (config.csrf) {
      configLines.push(`  csrf: {`);
      configLines.push(`    enabled: ${config.csrf.enabled ?? true},`);
      configLines.push(`  },`);
    }
    
    configLines.push('},');
    return configLines.join('\n  ');
  }

  private generateAccountConfig(config?: AuthConfig['account']) {
    if (!config) return '';
    
    const configLines: string[] = ['account: {'];
    
    if (config.accountLinking) {
      configLines.push(`  accountLinking: {`);
      configLines.push(`    enabled: ${config.accountLinking.enabled ?? true},`);
      if (config.accountLinking.trustedProviders) {
        configLines.push(`    trustedProviders: [${config.accountLinking.trustedProviders.map(p => `'${p}'`).join(', ')}],`);
      }
      configLines.push(`  },`);
    }
    
    configLines.push('},');
    return configLines.join('\n  ');
  }

  private generateUserConfig(config?: AuthConfig['user']) {
    if (!config) return '';
    
    const configLines: string[] = ['user: {'];
    
    if (config.additionalFields) {
      configLines.push(`  additionalFields: ${JSON.stringify(config.additionalFields, null, 2)},`);
    }
    
    if (config.deleteUser) {
      configLines.push(`  deleteUser: {`);
      configLines.push(`    enabled: ${config.deleteUser.enabled ?? true},`);
      configLines.push(`  },`);
    }
    
    if (config.changeEmail) {
      configLines.push(`  changeEmail: {`);
      configLines.push(`    enabled: ${config.changeEmail.enabled ?? true},`);
      if (config.changeEmail.requireVerification !== undefined) {
        configLines.push(`    requireVerification: ${config.changeEmail.requireVerification},`);
      }
      configLines.push(`  },`);
    }
    
    if (config.changePassword) {
      configLines.push(`  changePassword: {`);
      configLines.push(`    enabled: ${config.changePassword.enabled ?? true},`);
      if (config.changePassword.requireVerification !== undefined) {
        configLines.push(`    requireVerification: ${config.changePassword.requireVerification},`);
      }
      configLines.push(`  },`);
    }
    
    configLines.push('},');
    return configLines.join('\n  ');
  }

  private generateAdvancedConfig(config?: AuthConfig['advanced']) {
    const configLines: string[] = ['advanced: {'];
    
    configLines.push(`  useSecureCookies: process.env.NODE_ENV === 'production',`);
    configLines.push(`  cookiePrefix: '${config?.cookiePrefix || 'better-auth'}',`);
    
    if (config?.generateId) {
      configLines.push(`  generateId: () => crypto.randomUUID(),`);
    }
    
    if (config?.crossSubDomainCookies) {
      configLines.push(`  crossSubDomainCookies: {`);
      configLines.push(`    enabled: ${config.crossSubDomainCookies.enabled ?? false},`);
      configLines.push(`  },`);
    }
    
    if (config?.defaultCookieAttributes) {
      configLines.push(`  defaultCookieAttributes: ${JSON.stringify(config.defaultCookieAttributes, null, 2)},`);
    }
    
    configLines.push('},');
    return configLines.join('\n  ');
  }

  private generatePluginsConfig(plugins?: AuthConfig['plugins']) {
    if (!plugins || Object.keys(plugins).length === 0) return '';
    
    const pluginCalls: string[] = [];
    
    // Username plugin
    if (plugins.username) {
      pluginCalls.push('username()');
    }
    
    // Anonymous plugin
    if (plugins.anonymous) {
      pluginCalls.push('anonymous()');
    }
    
    // Phone Number plugin
    if (plugins.phoneNumber) {
      const config = plugins.phoneNumber;
      if (typeof config === 'object' && config.enabled !== false) {
        pluginCalls.push(`phoneNumber(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('phoneNumber()');
      }
    }
    
    // Magic Link plugin
    if (plugins.magicLink) {
      const config = plugins.magicLink;
      if (config.sendMagicLink) {
        pluginCalls.push(`magicLink({
      sendMagicLink: async ({ email, token, url }, request) => {
        const { sendMagicLink } = await import('$pkg/emails');
        return sendMagicLink({ email, token, url }, request);
      },
    })`);
      } else {
        pluginCalls.push('magicLink()');
      }
    }
    
    // Email OTP plugin
    if (plugins.emailOTP) {
      const config = plugins.emailOTP;
      if (config.sendVerificationOTP) {
        pluginCalls.push(`emailOTP({
      sendVerificationOTP: async ({ email, otp, type }, request) => {
        const { sendVerificationOTP } = await import('$pkg/emails');
        return sendVerificationOTP({ email, otp, type }, request);
      },
    })`);
      } else {
        pluginCalls.push('emailOTP()');
      }
    }
    
    // Generic OAuth plugin
    if (plugins.genericOAuth) {
      const config = plugins.genericOAuth;
      pluginCalls.push(`genericOAuth({
      config: ${JSON.stringify(config.config || [], null, 2)},
    })`);
    }
    
    // One Tap plugin
    if (plugins.oneTap) {
      const config = plugins.oneTap;
      if (typeof config === 'object') {
        pluginCalls.push(`oneTap(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('oneTap()');
      }
    }
    
    // Passkey plugin
    if (plugins.passkey) {
      const config = plugins.passkey;
      if (typeof config === 'object') {
        pluginCalls.push(`passkey(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('passkey()');
      }
    }
    
    // API Key plugin
    if (plugins.apiKey) {
      pluginCalls.push('apiKey()');
    }
    
    // Admin plugin
    if (plugins.admin) {
      const config = plugins.admin;
      if (typeof config === 'object') {
        pluginCalls.push(`admin(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('admin()');
      }
    }
    
    // Organization plugin
    if (plugins.organization) {
      const config = plugins.organization;
      if (typeof config === 'object') {
        pluginCalls.push(`organization(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('organization()');
      }
    }
    
    // Bearer plugin
    if (plugins.bearer) {
      pluginCalls.push('bearer()');
    }
    
    // Multi Session plugin
    if (plugins.multiSession) {
      const config = plugins.multiSession;
      if (typeof config === 'object') {
        pluginCalls.push(`multiSession(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('multiSession()');
      }
    }
    
    // OpenAPI plugin
    if (plugins.openAPI) {
      const config = plugins.openAPI;
      if (typeof config === 'object') {
        pluginCalls.push(`openAPI(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('openAPI()');
      }
    }
    
    // JWT plugin
    if (plugins.jwt) {
      const config = plugins.jwt;
      if (typeof config === 'object') {
        pluginCalls.push(`jwt(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('jwt()');
      }
    }
    
    // Two Factor plugin
    if (plugins.twoFactor) {
      const config = plugins.twoFactor;
      if (typeof config === 'object') {
        pluginCalls.push(`twoFactor(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('twoFactor()');
      }
    }
    
    // SSO plugin
    if (plugins.sso) {
      const config = plugins.sso;
      if (typeof config === 'object') {
        pluginCalls.push(`sso(${JSON.stringify(config)})`);
      } else {
        pluginCalls.push('sso()');
      }
    }
    
    if (pluginCalls.length === 0) return '';
    
    return `plugins: [\n    ${pluginCalls.join(',\n    ')}\n  ],`;
  }

  private async generateClientConfig(authConfig) {
    const configCode = `
// Auto-generated by Omni Framework - DO NOT EDIT
export const generatedClientConfig = {
  baseURL: typeof window !== 'undefined' ? window.location.origin : '${authConfig.baseURL || ''}',
  basePath: '${authConfig.basePath || '/api/auth'}',
};
export default generatedClientConfig;
    `;

    write_if_changed(`${runtime_directory}/auth/__generated__/client-config.js`,
      configCode
    );
  }
}


